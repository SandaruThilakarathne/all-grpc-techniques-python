# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import protos.protopb.rpc_pb2 as rpc__pb2


class GreetServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Greet = channel.unary_unary(
                '/protos.GreetService/Greet',
                request_serializer=rpc__pb2.GreetRequest.SerializeToString,
                response_deserializer=rpc__pb2.GreetResponse.FromString,
                )
        self.GreetManyTimes = channel.unary_stream(
                '/protos.GreetService/GreetManyTimes',
                request_serializer=rpc__pb2.GreetManyTimesRequest.SerializeToString,
                response_deserializer=rpc__pb2.GreetManyTimesResponse.FromString,
                )
        self.LGreet = channel.stream_unary(
                '/protos.GreetService/LGreet',
                request_serializer=rpc__pb2.LongGreetRequest.SerializeToString,
                response_deserializer=rpc__pb2.LongGreetResponse.FromString,
                )
        self.GreetEveryone = channel.stream_stream(
                '/protos.GreetService/GreetEveryone',
                request_serializer=rpc__pb2.GreetEveryoneRequest.SerializeToString,
                response_deserializer=rpc__pb2.GreetEveryoneResponse.FromString,
                )


class GreetServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Greet(self, request, context):
        """server and client unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GreetManyTimes(self, request, context):
        """client unary server stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LGreet(self, request_iterator, context):
        """client stream, server unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GreetEveryone(self, request_iterator, context):
        """Bi directional streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Greet': grpc.unary_unary_rpc_method_handler(
                    servicer.Greet,
                    request_deserializer=rpc__pb2.GreetRequest.FromString,
                    response_serializer=rpc__pb2.GreetResponse.SerializeToString,
            ),
            'GreetManyTimes': grpc.unary_stream_rpc_method_handler(
                    servicer.GreetManyTimes,
                    request_deserializer=rpc__pb2.GreetManyTimesRequest.FromString,
                    response_serializer=rpc__pb2.GreetManyTimesResponse.SerializeToString,
            ),
            'LGreet': grpc.stream_unary_rpc_method_handler(
                    servicer.LGreet,
                    request_deserializer=rpc__pb2.LongGreetRequest.FromString,
                    response_serializer=rpc__pb2.LongGreetResponse.SerializeToString,
            ),
            'GreetEveryone': grpc.stream_stream_rpc_method_handler(
                    servicer.GreetEveryone,
                    request_deserializer=rpc__pb2.GreetEveryoneRequest.FromString,
                    response_serializer=rpc__pb2.GreetEveryoneResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protos.GreetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GreetService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Greet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.GreetService/Greet',
            rpc__pb2.GreetRequest.SerializeToString,
            rpc__pb2.GreetResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GreetManyTimes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/protos.GreetService/GreetManyTimes',
            rpc__pb2.GreetManyTimesRequest.SerializeToString,
            rpc__pb2.GreetManyTimesResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LGreet(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/protos.GreetService/LGreet',
            rpc__pb2.LongGreetRequest.SerializeToString,
            rpc__pb2.LongGreetResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GreetEveryone(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/protos.GreetService/GreetEveryone',
            rpc__pb2.GreetEveryoneRequest.SerializeToString,
            rpc__pb2.GreetEveryoneResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
